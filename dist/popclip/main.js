/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  FileWriter: () => FileWriter,
  default: () => MyPlugin,
  slugify: () => slugify
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// settings.ts
var DEFAULT_SETTINGS = {
  mySetting: "default",
  actionHeading: "popclip",
  action: "advanced-uri"
};
var CUSTOM_SETTINGS = {
  useFrontmatter: true,
  useHeader: true,
  useSlugifyFileName: true,
  useTable: true
};
var SETTINGS = {
  ...DEFAULT_SETTINGS,
  ...CUSTOM_SETTINGS
};

// main.ts
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerObsidianProtocolHandler(SETTINGS.action, async (ev) => {
      if (ev.heading === SETTINGS.actionHeading) {
        new FileWriter(this.app).writeToFile(JSON.parse(ev.data));
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
  }
};
var FileWriter = class {
  constructor(app) {
    this.app = app;
  }
  async writeToFile(payload) {
    const path = this.normalizePath(payload);
    this.app.vault.adapter.write(
      (0, import_obsidian.normalizePath)(path),
      this.setContent(payload)
    );
  }
  normalizePath(payload) {
    let fileName = this.normalizedDate();
    if (payload.title) {
      const title = payload.title.slice(0, 20).trim();
      fileName = `${fileName}-${title}`;
    }
    if (SETTINGS.useSlugifyFileName) {
      fileName = slugify(fileName);
    }
    fileName = fileName + ".md";
    let filePath = decodeURIComponent(payload.path);
    console.log("parentFolder", filePath);
    const path = (0, import_obsidian.normalizePath)(filePath + "/" + fileName);
    console.log(payload.path, filePath, path);
    return path;
  }
  normalizedDate() {
    const datetime = new Date().toISOString().split(".")[0];
    return datetime.replaceAll("-", "").replaceAll(":", "").replace("T", "");
  }
  setFrontmatter(payload) {
    const elements = [
      "---",
      `title: "${payload == null ? void 0 : payload.title}"`,
      `source: ${(payload == null ? void 0 : payload.source) || ""}`,
      `date: ${new Date().toISOString()}`,
      "---"
    ];
    return elements.join("\n");
  }
  setHeader(payload) {
    return `# ${payload == null ? void 0 : payload.title}
`;
  }
  setTable(payload) {
    const currentDate = new Date().toISOString();
    const source = (payload == null ? void 0 : payload.source) || "";
  }
  setContent(payload) {
    const elements = [
      this.setFrontmatter(payload),
      this.setHeader(payload),
      payload == null ? void 0 : payload.clipping
    ];
    return elements.join("\n");
  }
};
function slugify(str) {
  str = str.replace(/^\s+|\s+$/g, "");
  str = str.toLowerCase();
  var from = "\u0131\xFC\xF6\xE7\u011F\xE0\xE1\xE4\xE2\xE8\xE9\xEB\xEA\xEC\xED\xEF\xEE\xF2\xF3\xF6\xF4\xF9\xFA\xFC\xFB\xF1\xE7\xB7/_,:;";
  var to = "iuocgaaaaeeeeiiiioooouuuunc------";
  for (var i = 0, l = from.length; i < l; i++) {
    str = str.replace(new RegExp(from.charAt(i), "g"), to.charAt(i));
  }
  str = str.replace(/[^a-z0-9 -]/g, "").replace(/\s+/g, "-").replace(/-+/g, "-");
  if (str.startsWith("-")) {
    str = str.substring(1);
  } else if (str.endsWith("-")) {
    str = str.substring(0, str.length - 1);
  }
  return str;
}
